require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/contents", type: :request do
  before do
    @season1 = Content.create(title: 'the season test title 1', plot: 'www.plot/url/location1', number: 1, content_type:'s')
    @episode1 = Episode.create(title: 'the episode test title 1', plot: 'www.plot/url/location', number: 1, season: @season1)
    @episode2 = Episode.create(title: 'the episode test title 2', plot: 'www.plot/url/location2', number: 2, season: @season1)
    @movie1 = Content.create(title: 'the movie test title 1', plot: 'www.plot/url/location1', content_type:'m')
    @movie2 = Content.create(title: 'the movie test title 2', plot: 'www.plot/url/location2', content_type:'m')
    @season2 = Content.create(title: 'the season test title 1', plot: 'www.plot/url/location2', number: 2, content_type:'s')
  end
  context "GET /index" do
    before do
      get '/contents', as: :json
    end

    it "renders a successful response" do
      expect(response).to be_successful
    end

    it 'return a list with 3 contents' do
      expect(JSON.parse(response.body).size).to eq(4)
    end

    it 'the list is ordered by creation' do
      list_of_ids = JSON.parse(response.body).map{ |content| content['id'] }
      expect( list_of_ids ).to eq( [@season1.id, @movie1.id, @movie2.id, @season2.id] )
    end
  end

  context "GET /movies" do
    before do
      get '/contents/movies', as: :json
    end

    it "renders a successful response" do
      expect(response).to be_successful
    end

    it 'return a list with 2 contents' do
      expect(JSON.parse(response.body).size).to eq(2)
    end

    it 'the list is ordered by creation' do
      list_of_ids = JSON.parse(response.body).map{ |content| content['id'] }
      expect( list_of_ids ).to eq( [@movie1.id, @movie2.id] )
    end
  end

  context "GET /seasons" do
    before do
      get '/contents/seasons', as: :json
    end

    it "renders a successful response" do
      expect(response).to be_successful
    end

    it 'return a list with 2 contents' do
      expect(JSON.parse(response.body).size).to eq(2)
    end

    it 'the list is ordered by creation' do
      list_of_ids = JSON.parse(response.body).map{ |content| content['id'] }
      expect( list_of_ids ).to eq( [@season1.id, @season2.id] )
    end

    it 'the season is retrieved with is episodes list' do
      episodes_ids_list = JSON.parse(response.body).first['episodes'].map{ |content| content['id'] }
      expect( episodes_ids_list ).to eq( [@episode1.id, @episode2.id] )
    end
  end
end
