require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/purchases", type: :request do
  before do
    @user = User.create(email: 'user@streaming.com')
    @content = Content.create(title: 'the purchase test title 1', plot: 'www.plot/url/location1', number: 1, content_type:'s')
    @purchase_option = PurchaseOption.create(quality: 'hd', price: 10.00, content: @content)
    @purchases_url = "/users/" + @user.id.to_s + "/purchases"
    @valid_attributes = {purchase_option_id: @purchase_option.id, user_id: @user.id}
    @invalid_attributes = {content_id: @content.id, user_id: @user.id}
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Purchase" do
        expect {
          post @purchases_url,
                params: { purchase: @valid_attributes }, as: :json
        }.to change(Purchase, :count).by(1)
      end

      it "renders a JSON response with the new purchase" do
        post @purchases_url,
              params: { purchase: @valid_attributes }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "ensures that the content is on the userÂ´s library" do
        post @purchases_url,
              params: { purchase: @valid_attributes }, as: :json
        expect(@user.contents.map{ |content| content.id}).to eq([@content.id])
      end
    end

    context "with invalid parameters" do
      it "does not create a new Purchase" do
        expect {
          post @purchases_url,
                params: { purchase: @invalid_attributes }, as: :json
        }.to change(Purchase, :count).by(0)
      end

      it "renders a JSON response with errors for the new purchase" do
        post @purchases_url,
              params: { purchase: @invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end
end
